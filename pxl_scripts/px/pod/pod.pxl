# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

'''Pod Overview

Overview of a specific Pod monitored by Pixie with its high level application metrics
(latency, error-rate & rps) and resource usage (cpu, writes, reads).

'''

import px


ns_per_ms = 1000 * 1000
ns_per_s = 1000 * ns_per_ms
# Window size to use on time_ column for bucketing.
window_ns = px.DurationNanos(10 * ns_per_s)
# Flag to filter out requests that come from an unresolvable IP.
filter_unresolved_inbound = True
# Flag to filter out health checks from the data.
filter_health_checks = True
# Flag to filter out ready checks from the data.
filter_ready_checks = True


def containers(start_time: str, pod: px.Pod):
    ''' A list of containers in `pod`.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['pod'] == pod]
    df.name = df.ctx['container_name']
    df.id = df.ctx['container_id']
    df = df.groupby(['name', 'id']).agg()
    df.status = px.container_id_to_status(df.id)
    return df


def processes(start_time: str, pod: px.Pod):
    ''' A list of processes in `pod`.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['pod'] == pod]
    df.cmd = df.ctx['cmdline']
    df.pid = df.ctx['pid']
    df = df.groupby(['pid', 'cmd', 'upid']).agg()
    return df


def resource_timeseries(start_time: str, pod: px.Pod):
    ''' Compute the resource usage as a timeseries for `pod`.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['pod'] == pod]
    df.timestamp = px.bin(df.time_, window_ns)
    df.container = df.ctx['container_name']

    # Convert nanoseconds to milliseconds.
    df.cpu_utime_ms = df.cpu_utime_ns / 1.0E6
    df.cpu_ktime_ms = df.cpu_ktime_ns / 1.0E6

    # First calculate CPU usage by process (UPID) in each k8s_object
    # over all windows.
    df = df.groupby(['upid', 'container', 'timestamp']).agg(
        rss_bytes=('rss_bytes', px.mean),
        vsize_bytes=('vsize_bytes', px.mean),
        # The fields below are counters, so we take the min and the max to subtract them.
        cpu_utime_ms_max=('cpu_utime_ms', px.max),
        cpu_utime_ms_min=('cpu_utime_ms', px.min),
        cpu_ktime_ms_max=('cpu_ktime_ms', px.max),
        cpu_ktime_ms_min=('cpu_ktime_ms', px.min),
        read_bytes_max=('read_bytes', px.max),
        read_bytes_min=('read_bytes', px.min),
        write_bytes_max=('write_bytes', px.max),
        write_bytes_min=('write_bytes', px.min),
        rchar_bytes_max=('rchar_bytes', px.max),
        rchar_bytes_min=('rchar_bytes', px.min),
        wchar_bytes_max=('wchar_bytes', px.max),
        wchar_bytes_min=('wchar_bytes', px.min),
    )

    # Next calculate cpu usage and memory stats per window.
    df.cpu_utime_ms = df.cpu_utime_ms_max - df.cpu_utime_ms_min
    df.cpu_ktime_ms = df.cpu_ktime_ms_max - df.cpu_ktime_ms_min
    df.read_bytes_per_ns = (df.read_bytes_max - df.read_bytes_min) / window_ns
    df.write_bytes_per_ns = (df.write_bytes_max - df.write_bytes_min) / window_ns
    df.rchar_bytes_per_ns = (df.rchar_bytes_max - df.rchar_bytes_min) / window_ns
    df.wchar_bytes_per_ns = (df.wchar_bytes_max - df.wchar_bytes_min) / window_ns

    # Then aggregate process individual process metrics.
    df = df.groupby(['timestamp', 'container']).agg(
        cpu_ktime_ms=('cpu_ktime_ms', px.sum),
        cpu_utime_ms=('cpu_utime_ms', px.sum),
        read_bytes_per_ns=('read_bytes_per_ns', px.sum),
        write_bytes_per_ns=('write_bytes_per_ns', px.sum),
        rchar_bytes_per_ns=('rchar_bytes_per_ns', px.sum),
        wchar_bytes_per_ns=('wchar_bytes_per_ns', px.sum),
        rss_bytes=('rss_bytes', px.sum),
        vsize_bytes=('vsize_bytes', px.sum),
    )

    # Convert window_ns into the same units as cpu time.
    window_size_ms = window_ns * 1.0E3
    # Finally, calculate total (kernel + user time)  percentage used over window.
    df.cpu_pct = (df.cpu_ktime_ms + df.cpu_utime_ms) / window_size_ms * 100
    df['time_'] = df['timestamp']
    return df.drop(['cpu_ktime_ms', 'cpu_utime_ms', 'timestamp'])


def network_timeseries(start_time: str, pod: px.Pod):
    ''' Gets the network stats (transmitted/received traffic) for the input node.

    Args:
    @start: Starting time of the data to examine.
    @node: The full name of the node to filter on.
    '''
    df = px.DataFrame(table='network_stats', start_time=start_time)
    df = df[df.ctx['pod'] == pod]
    df.timestamp = px.bin(df.time_, window_ns)

    # First calculate network usage by node over all windows.
    # Data is sharded by Pod in network_stats.
    df = df.groupby(['timestamp', 'pod_id']).agg(
        rx_bytes_end=('rx_bytes', px.max),
        rx_bytes_start=('rx_bytes', px.min),
        tx_bytes_end=('tx_bytes', px.max),
        tx_bytes_start=('tx_bytes', px.min),
        tx_errors_end=('tx_errors', px.max),
        tx_errors_start=('tx_errors', px.min),
        rx_errors_end=('rx_errors', px.max),
        rx_errors_start=('rx_errors', px.min),
        tx_drops_end=('tx_drops', px.max),
        tx_drops_start=('tx_drops', px.min),
        rx_drops_end=('rx_drops', px.max),
        rx_drops_start=('rx_drops', px.min),
    )

    # Calculate the network statistics rate over the window.
    # We subtract the counter value at the beginning ('_start')
    # from the value at the end ('_end').
    df.rx_bytes_per_ns = (df.rx_bytes_end - df.rx_bytes_start) / window_ns
    df.tx_bytes_per_ns = (df.tx_bytes_end - df.tx_bytes_start) / window_ns
    df.rx_drops_per_ns = (df.rx_drops_end - df.rx_drops_start) / window_ns
    df.tx_drops_per_ns = (df.tx_drops_end - df.tx_drops_start) / window_ns
    df.rx_errors_per_ns = (df.rx_errors_end - df.rx_errors_start) / window_ns
    df.tx_errors_per_ns = (df.tx_errors_end - df.tx_errors_start) / window_ns

    # Add up the network values per node.
    df = df.groupby(['timestamp']).agg(
        rx_bytes_per_ns=('rx_bytes_per_ns', px.sum),
        tx_bytes_per_ns=('tx_bytes_per_ns', px.sum),
        rx_drop_per_ns=('rx_drops_per_ns', px.sum),
        tx_drops_per_ns=('tx_drops_per_ns', px.sum),
        rx_errors_per_ns=('rx_errors_per_ns', px.sum),
        tx_errors_per_ns=('tx_errors_per_ns', px.sum),
    )
    df['time_'] = df['timestamp']
    return df


def inbound_latency_timeseries(start_time: str, pod: px.Pod):
    ''' Compute the latency as a timeseries for requests received by `pod`.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = let_helper(start_time)
    df = df[df.pod == pod]

    df = df.groupby(['timestamp']).agg(
        latency_quantiles=('latency_ns', px.quantiles)
    )

    # Format the result of LET aggregates into proper scalar formats and
    # time series.
    df.latency_p50 = px.pluck_float64(df.latency_quantiles, 'p50')
    df.latency_p90 = px.pluck_float64(df.latency_quantiles, 'p90')
    df.latency_p99 = px.pluck_float64(df.latency_quantiles, 'p99')
    df.time_ = df.timestamp
    return df[['time_', 'latency_p50', 'latency_p90', 'latency_p99']]


def inbound_request_timeseries_by_container(start_time: str, pod: px.Pod):
    ''' Compute the request statistics as a timeseries for requests received
        by `pod` by container.

    Args:
    @start_time: The timestamp of data to start at.
    @pod: The name of the pod to filter on.

    '''
    df = let_helper(start_time)
    df = df[df.pod == pod]
    df.container = df.ctx['container']

    df = df.groupby(['timestamp', 'container']).agg(
        error_rate_per_window=('failure', px.mean),
        throughput_total=('latency_ns', px.count)
    )

    # Format the result of LET aggregates into proper scalar formats and
    # time series.
    df.requests_per_ns = df.throughput_total / window_ns
    df.errors_per_ns = df.error_rate_per_window * df.requests_per_ns
    df.error_rate_pct = px.Percent(df.error_rate_per_window)
    df.time_ = df.timestamp

    return df[['time_', 'container', 'requests_per_ns', 'errors_per_ns', 'error_rate_pct']]


def inbound_let_summary(start_time: str, pod: px.Pod):
    ''' Gets a summary of requests inbound to `pod`.

    Args:
    @start: Starting time of the data to examine.
    @pod: The pod to filter on.
    '''
    df = let_helper(start_time)
    df = df[df.pod == pod]

    quantiles_agg = df.groupby(['pod', 'remote_addr']).agg(
        latency_ns=('latency_ns', px.quantiles),
        total_request_count=('latency_ns', px.count)
    )

    quantiles_table = quantiles_agg[['pod', 'remote_addr', 'latency_ns',
                                     'total_request_count']]

    range_agg = df.groupby(['pod', 'remote_addr', 'timestamp']).agg(
        requests_per_window=('time_', px.count),
        error_rate=('failure', px.mean)
    )

    rps_table = range_agg.groupby(['pod', 'remote_addr']).agg(
        requests_per_window=('requests_per_window', px.mean),
        error_rate=('error_rate', px.mean)
    )

    joined_table = quantiles_table.merge(rps_table,
                                         how='inner',
                                         left_on=['pod', 'remote_addr'],
                                         right_on=['pod', 'remote_addr'],
                                         suffixes=['', '_x'])

    joined_table.error_rate_pct = px.Percent(joined_table.error_rate)
    joined_table.requests_per_ns = joined_table.requests_per_window / window_ns

    joined_table.responder = df.pod
    joined_table.requestor = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))

    return joined_table[['requestor', 'remote_addr', 'latency_ns',
                         'error_rate_pct', 'requests_per_ns']]


def let_helper(start_time: str):
    ''' Compute the initial part of the let for requests.
        Filtering to inbound/outbound traffic by pod is done by the calling function.

    Args:
    @start_time: The timestamp of data to start at.

    '''
    df = px.DataFrame(table='http_events', start_time=start_time)
    df.pod = df.ctx['pod']
    df.latency_ns = df.http_resp_latency_ns
    df = df[df['latency_ns'] < (10000 * 1000000)]
    df.timestamp = px.bin(df.time_, window_ns)

    df.resp_size = px.length(df.http_resp_body)
    df.failure = df.http_resp_status >= 400
    filter_out_conds = ((df.http_req_path != '/health' or not filter_health_checks) and (
        df.http_req_path != '/readyz' or not filter_ready_checks)) and (
        df['remote_addr'] != '-' or not filter_unresolved_inbound)

    df = df[filter_out_conds]
    return df
