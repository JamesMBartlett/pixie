# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

import px

###############################################################
# The following can be edited to k8s object and name to match.
###############################################################
# The Kubernetes object to filter on.
#    Options are ['pod', 'service']
k8s_object = 'pod'

# If you want to filter the object by name, enter the partial
# or full name here.
match_name = ''
###############################################################

#
# Get the virtual and real memory usage for each pod/svc
# in the cluster.
#
t1 = px.DataFrame(table='process_stats', start_time='-1m')
bytes_per_mb = 1024.0 * 1024.0
t1.vsize_mb = t1.vsize_bytes / bytes_per_mb
t1.rss_bytes_mb = t1.rss_bytes / bytes_per_mb
t1.timestamp = px.bin(t1.time_, px.seconds(10))
t1[k8s_object] = t1.ctx[k8s_object]

t1 = t1[px.contains(t1[k8s_object], match_name)]

upid_aggop = t1.groupby(['upid', k8s_object, 'timestamp']).agg(
    vsize_mb=('vsize_mb', px.mean),
    rss_bytes_mb=('rss_bytes_mb', px.mean),
)

# For this aggregate, we sum up the values as we've already calculated the average/usage
# for the upids already, just need to do it for the entire svc.
aggop = upid_aggop.groupby([k8s_object, 'timestamp']).agg(
    vsize_mb=('vsize_mb', px.sum),
    rss_bytes_mb=('rss_bytes_mb', px.sum),
)

# Format column names.
aggop['Virtual Memory (mb)'] = aggop.vsize_mb
aggop['Average Memory (mb)'] = aggop.rss_bytes_mb
keep_columns = aggop[[
    k8s_object,
    'timestamp',
    'Virtual Memory (mb)',
    'Average Memory (mb)'
]]

px.display(keep_columns)
