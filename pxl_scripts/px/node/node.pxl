# Copyright (c) Pixie Labs, Inc.
# Licensed under the Apache License, Version 2.0 (the "License")

''' Node Overview

This view summarizes the process and network stats for a given input node in a cluster.
It computes CPU, memory consumption, as well as network traffic statistics.
It also displays a list of pods that were on that node during the time window.

'''
import px

ns_per_ms = 1000 * 1000
ns_per_s = 1000 * ns_per_ms
# Window size to use on time_ column for bucketing.
window_ns = px.DurationNanos(10 * ns_per_s)


def pods_for_node(start_time: str, node: px.Node):
    ''' Gets a list of pods running on the input node.

    Args:
    @start: Starting time of the data to examine.
    @node: The full name of the node to filter on.
    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['node_name'] == node]
    df.pod = df.ctx['pod_name']
    df.container = df.ctx['container_name']
    df = df.groupby(['pod', 'container']).agg()
    df = df.groupby('pod').agg(containers=('container', px.count))
    df.start_time = px.pod_name_to_start_time(df.pod)
    df.status = px.pod_name_to_status(df.pod)
    return df[['pod', 'start_time', 'containers', 'status']]


def resource_timeseries(start_time: str, node: px.Node, groupby: str):
    ''' Gets the windowed process stats (CPU, memory, etc) for the input node.

    Args:
    @start: Starting time of the data to examine.
    @node: The full name of the node to filter on.
    '''
    df = px.DataFrame(table='process_stats', start_time=start_time)
    df = df[df.ctx['node_name'] == node]
    df[groupby] = df.ctx[groupby]
    df.timestamp = px.bin(df.time_, window_ns)

    # Convert nanoseconds to milliseconds.
    df.cpu_utime_ms = df.cpu_utime_ns / 1.0E6
    df.cpu_ktime_ms = df.cpu_ktime_ns / 1.0E6

    # First calculate CPU usage by process (UPID) in each k8s_object
    # over all windows.
    df = df.groupby(['upid', 'timestamp', groupby]).agg(
        rss_bytes=('rss_bytes', px.mean),
        vsize_bytes=('vsize_bytes', px.mean),
        # The fields below are counters, so we take the min and the max to subtract them.
        cpu_utime_ms_max=('cpu_utime_ms', px.max),
        cpu_utime_ms_min=('cpu_utime_ms', px.min),
        cpu_ktime_ms_max=('cpu_ktime_ms', px.max),
        cpu_ktime_ms_min=('cpu_ktime_ms', px.min),
        read_bytes_max=('read_bytes', px.max),
        read_bytes_min=('read_bytes', px.min),
        write_bytes_max=('write_bytes', px.max),
        write_bytes_min=('write_bytes', px.min),
        rchar_bytes_max=('rchar_bytes', px.max),
        rchar_bytes_min=('rchar_bytes', px.min),
        wchar_bytes_max=('wchar_bytes', px.max),
        wchar_bytes_min=('wchar_bytes', px.min),
    )
    # Next calculate cpu usage and memory stats per window.
    df.cpu_utime_ms = df.cpu_utime_ms_max - df.cpu_utime_ms_min
    df.cpu_ktime_ms = df.cpu_ktime_ms_max - df.cpu_ktime_ms_min
    df.read_bytes_per_ns = (df.read_bytes_max - df.read_bytes_min) / window_ns
    df.write_bytes_per_ns = (df.write_bytes_max - df.write_bytes_min) / window_ns
    df.rchar_bytes_per_ns = (df.rchar_bytes_max - df.rchar_bytes_min) / window_ns
    df.wchar_bytes_per_ns = (df.wchar_bytes_max - df.wchar_bytes_min) / window_ns

    # Then aggregate process individual process metrics.
    df = df.groupby(['timestamp', groupby]).agg(
        cpu_ktime_ms=('cpu_ktime_ms', px.sum),
        cpu_utime_ms=('cpu_utime_ms', px.sum),
        read_bytes_per_ns=('read_bytes_per_ns', px.sum),
        write_bytes_per_ns=('write_bytes_per_ns', px.sum),
        rchar_bytes_per_ns=('rchar_bytes_per_ns', px.sum),
        wchar_bytes_per_ns=('wchar_bytes_per_ns', px.sum),
        rss_bytes=('rss_bytes', px.sum),
        vsize_bytes=('vsize_bytes', px.sum),
    )

    # Convert window_ns into the same units as cpu time.
    window_size_ms = window_ns * 1.0E3
    # Finally, calculate total (kernel + user time)  percentage used over window.
    df.cpu_pct = (df.cpu_ktime_ms + df.cpu_utime_ms) / window_size_ms * 100
    df['time_'] = df['timestamp']
    df.groupby_col = df[groupby]
    return df.drop(['cpu_ktime_ms', 'cpu_utime_ms', 'timestamp', groupby])


def network_stats(start_time: str, node: px.Node, groupby: str):
    ''' Gets the network stats (transmitted/received traffic) for the input node.

    Args:
    @start: Starting time of the data to examine.
    @node: The full name of the node to filter on.
    '''
    df = px.DataFrame(table='network_stats', start_time=start_time)
    df = df[px.pod_id_to_node_name(df.pod_id) == node]
    df[groupby] = df.ctx[groupby]
    df.timestamp = px.bin(df.time_, window_ns)

    # First calculate network usage by node over all windows.
    # Data is sharded by Pod in network_stats.
    df = df.groupby(['timestamp', 'pod_id', groupby]).agg(
        rx_bytes_end=('rx_bytes', px.max),
        rx_bytes_start=('rx_bytes', px.min),
        tx_bytes_end=('tx_bytes', px.max),
        tx_bytes_start=('tx_bytes', px.min),
        tx_errors_end=('tx_errors', px.max),
        tx_errors_start=('tx_errors', px.min),
        rx_errors_end=('rx_errors', px.max),
        rx_errors_start=('rx_errors', px.min),
        tx_drops_end=('tx_drops', px.max),
        tx_drops_start=('tx_drops', px.min),
        rx_drops_end=('rx_drops', px.max),
        rx_drops_start=('rx_drops', px.min),
    )

    # Calculate the network statistics rate over the window.
    # We subtract the counter value at the beginning ('_start')
    # from the value at the end ('_end').
    df.rx_bytes_per_ns = (df.rx_bytes_end - df.rx_bytes_start) / window_ns
    df.tx_bytes_per_ns = (df.tx_bytes_end - df.tx_bytes_start) / window_ns
    df.rx_drops_per_ns = (df.rx_drops_end - df.rx_drops_start) / window_ns
    df.tx_drops_per_ns = (df.tx_drops_end - df.tx_drops_start) / window_ns
    df.rx_errors_per_ns = (df.rx_errors_end - df.rx_errors_start) / window_ns
    df.tx_errors_per_ns = (df.tx_errors_end - df.tx_errors_start) / window_ns

    # Add up the network values per node.
    df = df.groupby(['timestamp', groupby]).agg(
        rx_bytes_per_ns=('rx_bytes_per_ns', px.sum),
        tx_bytes_per_ns=('tx_bytes_per_ns', px.sum),
        rx_drop_per_ns=('rx_drops_per_ns', px.sum),
        tx_drops_per_ns=('tx_drops_per_ns', px.sum),
        rx_errors_per_ns=('rx_errors_per_ns', px.sum),
        tx_errors_per_ns=('tx_errors_per_ns', px.sum),
    )
    df.groupby_col = df[groupby]
    df['time_'] = df['timestamp']
    return df.drop(['timestamp', groupby])
